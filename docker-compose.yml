name: microservices

services:
  song-service:
    deploy:
      replicas: 1
    env_file:
      - .env
    build: ./song
    depends_on:
      db-song:
        condition: service_healthy
      eureka:
        condition: service_healthy
    environment:
      DOCKER_EUREKA: eureka
      DOCKER_DB: song-db
    networks:
      - ls

  resource-service:
    env_file:
      - .env
    build: ./resource
    #    ports:
    #      - 8095:8091
    depends_on:
      db-resource:
        condition: service_healthy
      eureka: 
        condition: service_healthy
      rabbitMQ: 
        condition: service_healthy
      localstack:
        condition: service_healthy
    environment:
      DOCKER_EUREKA: eureka
      DOCKER_DB: resource-db
      RABBITMQ_PASSWORD: ${rabbitmq_password}
      RABBITMQ_USERNAME: ${rabbitmq_user}
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: ${rabbitmq_port}
      RABBITMQ_QUEUE_NAME: ${rabbitmq_queue}
    dns:
      - 10.0.2.20
    networks:
      - ls
  
  resource-processor-service:
    env_file:
      - .env
    build: ./resource-processor
    depends_on:
      eureka:
        condition: service_healthy
      rabbitMQ: 
        condition: service_healthy
    environment:
      DOCKER_EUREKA: eureka
      RABBITMQ_PASSWORD: ${rabbitmq_password}
      RABBITMQ_USERNAME: ${rabbitmq_user}
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: ${rabbitmq_port}
      RABBITMQ_QUEUE_NAME: ${rabbitmq_queue}
    networks:
      - ls
        
  storage-service:
    deploy:
      replicas: 1
    env_file:
      - .env
    build: ./storage
    ports:
      - 8096:8096
    depends_on:
      db-storage:
        condition: service_healthy
      eureka:
        condition: service_healthy
    environment:
      DOCKER_EUREKA: eureka
      DOCKER_DB: storage-db
      DOCKER_ZIPKIN: zipkin
    networks:
      - ls
          
  eureka:
    build: ./eureka-server
    ports:
      - 8761:8761
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "8761" ]
      interval: 5s
      timeout: 15s
      retries: 10
    networks:
      - ls
        
  authorization-server:
    deploy:
      replicas: 1
    env_file:
      - .env
    build: ./authorization-server
    ports:
      - 9000:9000
    depends_on:
      eureka:
        condition: service_healthy
    environment:
      DOCKER_EUREKA: eureka
    networks:
      - ls
    
  gateway:
    build: ./gateway
    ports:
      - 8888:8888
    depends_on:
      eureka:
        condition: service_healthy
    environment:
      DOCKER_EUREKA: eureka
    networks:
      - ls
  
  db-song:
    hostname: song-db
    image: postgres:16-alpine
    volumes:
      - ./init-scripts/song_db/init.sql:/docker-entrypoint-initdb.d/db.sql
    environment:
      POSTGRES_USER: ${song_db_user}
      POSTGRES_PASSWORD: ${song_db_password}
      POSTGRES_DB: ${song_db_name}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${resource_db_user} -d ${resource_db_name}" ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    networks:
      - ls
  
  db-resource:
    hostname: resource-db
    image: postgres:16-alpine
    ports:
      - "5432:5432"
    volumes:
      - ./init-scripts/resource_db/init.sql:/docker-entrypoint-initdb.d/db.sql
    environment:
      POSTGRES_USER: ${resource_db_user}
      POSTGRES_PASSWORD: ${resource_db_password}
      POSTGRES_DB: ${resource_db_name}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${resource_db_user} -d ${resource_db_name}" ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    networks:
      - ls
        
  db-storage:
    hostname: storage-db
    image: postgres:16-alpine
    volumes:
      - ./init-scripts/storage_db/init.sql:/docker-entrypoint-initdb.d/db.sql
    environment:
      POSTGRES_USER: ${storage_db_user}
      POSTGRES_PASSWORD: ${storage_db_password}
      POSTGRES_DB: ${storage_db_name}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${storage_db_user} -d ${storage_db_name}" ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    networks:
      - ls
  
  localstack:
    container_name: "${LOCALSTACK_DOCKER_NAME:-localstack-main}"
    image: localstack/localstack
    ports:
      # Now only required if you need to access LocalStack from the host
      - "127.0.0.1:4566:4566"
      # Now only required if you need to access LocalStack from the host
      - "127.0.0.1:4510-4559:4510-4559"
    environment:
      - DEBUG=${DEBUG:-0}
    volumes:
      - "${LOCALSTACK_VOLUME_DIR:-./volume}:/var/lib/localstack"
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "./init-scripts/localstack/init-aws.sh:/etc/localstack/init/ready.d/init-aws.sh"
    networks:
      ls:
        ipv4_address: 10.0.2.20
  
  rabbitMQ:
    container_name: 'resource-rabbit'
    image: rabbitmq
    command: rabbitmq-server
    hostname: rabbitmq
    env_file:
      - .env
    environment:
      RABBITMQ_DEFAULT_PASS: ${rabbitmq_password}
      RABBITMQ_DEFAULT_USER: ${rabbitmq_user}
    ports:
      - '5672'
    expose:
      - 5672
      - 15672
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 5s
      timeout: 15s
      retries: 3
    networks:
      - ls
  
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:9.0.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test: "curl -f http://localhost:9200 || exit 1"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - ls

  kibana:
    image: docker.elastic.co/kibana/kibana:9.0.0
    container_name: kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    depends_on:
      - elasticsearch
    healthcheck:
      test: "curl -f http://localhost:5601 || exit 1"
    networks:
      - ls
  
  filebeat:
    build: filebeat
    container_name: filebeat
    user: root
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    depends_on:
      - elasticsearch
    networks:
      - ls
  
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - 9090:9090
    restart: unless-stopped
    volumes:
      - ./prometheus:/etc/prometheus
      - prom_data:/prometheus
    networks:
      - ls
  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - 3000:3000
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=grafana
    volumes:
      - ./grafana:/etc/grafana/provisioning
      - grafana-storage:/var/lib/grafana
    networks:
      - ls
  
  zipkin:
    image: ghcr.io/openzipkin/zipkin-slim:${TAG:-latest}
    container_name: zipkin
    environment:
      - STORAGE_TYPE=mem
    ports:
      - "9411:9411"
    networks:
      - ls

volumes:
  prom_data:
  grafana-storage:
  elasticsearch-data:

networks:
  ls:
    ipam:
      config:
        - subnet: 10.0.2.0/24