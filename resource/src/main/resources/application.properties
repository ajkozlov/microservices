spring.application.name=resource
spring.servlet.multipart.max-file-size=5MB
spring.servlet.multipart.max-request-size=5MB

resilience4j.circuitbreaker.configs.default.registerHealthIndicator: true
resilience4j.circuitbreaker.configs.default.slidingWindowType: COUNT_BASED
resilience4j.circuitbreaker.configs.default.slidingWindowSize: 5
resilience4j.circuitbreaker.configs.default.minimumNumberOfCalls: 3
resilience4j.circuitbreaker.configs.default.failureRateThreshold: 50
resilience4j.circuitbreaker.configs.default.waitDurationInOpenState: 5s
resilience4j.circuitbreaker.configs.default.automaticTransitionFromOpenToHalfOpenEnabled: true
resilience4j.circuitbreaker.configs.default.permittedNumberOfCallsInHalfOpenState: 2
resilience4j.circuitbreaker.instances.storageServiceCircuitBreaker.baseConfig: default

server.port=8091

eureka.client.serviceUrl.defaultZone=http://${DOCKER_EUREKA:localhost}:8761/eureka

spring.datasource.url=jdbc:postgresql://${DOCKER_DB:localhost}/resources
spring.datasource.username=resource
spring.datasource.password=resource
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.database=postgresql
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=none

aws.credentials.access-key=${env.aws.credentials.access-key:test_access_key}
aws.credentials.secret-key=${env.aws.credentials.secret-key:test_secret_access_key}
aws.s3.endpoint=${env.aws.s3.endpoint:localhost:4566}
aws.region=${env.aws.region:us-east-1}
aws.s3.bucket=${env.aws.s3.bucket:test-bucket}

spring.rabbitmq.password=${RABBITMQ_PASSWORD:secret}
spring.rabbitmq.username=${RABBITMQ_USERNAME:myuser}
spring.rabbitmq.host=${RABBITMQ_HOST:rabbitmq}
spring.rabbitmq.port=${RABBITMQ_PORT:5672}

rabbitMQ.queueName=${RABBITMQ_QUEUE_NAME:resourceQueue}

management.endpoint.metrics.enabled=true
management.endpoints.web.exposure.include=*
management.endpoint.prometheus.enabled=true
management.metrics.export.prometheus.enabled=true
management.tracing.sampling.probability=1
management.zipkin.tracing.endpoint=http://zipkin:9411/api/v2/spans

spring.security.oauth2.client.registration.storage-client-oidc.provider=spring
spring.security.oauth2.client.registration.storage-client-oidc.client-id=storage-client
spring.security.oauth2.client.registration.storage-client-oidc.client-secret=secret
spring.security.oauth2.client.registration.storage-client-oidc.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.storage-client-oidc.redirect-uri=http://127.0.0.1:8080/login/oauth2/code/{registrationId}
spring.security.oauth2.client.registration.storage-client-oidc.scope=openid
spring.security.oauth2.client.registration.storage-client-oidc.client-name=storage-client-oidc

spring.security.oauth2.client.registration.storage-client-authorization-code.provider=spring
spring.security.oauth2.client.registration.storage-client-authorization-code.client-id=storage-client
spring.security.oauth2.client.registration.storage-client-authorization-code.client-secret=secret
spring.security.oauth2.client.registration.storage-client-authorization-code.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.storage-client-authorization-code.redirect-uri=http://127.0.0.1:8080/authorized
spring.security.oauth2.client.registration.storage-client-authorization-code.scope=storage.read
spring.security.oauth2.client.registration.storage-client-authorization-code.client-name=storage-client-authorization-code

spring.security.oauth2.client.provider.spring.issuer-uri=http://authorization-server:9000
